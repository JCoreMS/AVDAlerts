{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.9.1.41621",
      "templateHash": "6338698783343477462"
    }
  },
  "parameters": {
    "ActionGroupName": {
      "type": "string"
    },
    "AutomationAccountName": {
      "type": "string"
    },
    "DistributionGroup": {
      "type": "string"
    },
    "Location": {
      "type": "string"
    },
    "LogAnalyticsWorkspaceResourceId": {
      "type": "string"
    },
    "LogAlerts": {
      "type": "array"
    },
    "LogicAppName": {
      "type": "string"
    },
    "MetricAlerts": {
      "type": "object"
    },
    "RunbookNameGetStorage": {
      "type": "string"
    },
    "RunbookNameGetHostPool": {
      "type": "string"
    },
    "RunbookScriptGetStorage": {
      "type": "string"
    },
    "RunbookScriptGetHostPool": {
      "type": "string"
    },
    "ScriptsRepositorySasToken": {
      "type": "secureString"
    },
    "ScriptsRepositoryUri": {
      "type": "string"
    },
    "SessionHostsResourceGroupIds": {
      "type": "array"
    },
    "StorageAccountResourceIds": {
      "type": "array"
    },
    "Tags": {
      "type": "object"
    },
    "Timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('u')]"
    },
    "ANFVolumeResourceIds": {
      "type": "array"
    }
  },
  "variables": {
    "SubscriptionId": "[subscription().subscriptionId]",
    "CloudEnvironment": "[environment().name]"
  },
  "resources": [
    {
      "type": "microsoft.insights/actionGroups",
      "apiVersion": "2019-06-01",
      "name": "[parameters('ActionGroupName')]",
      "location": "global",
      "properties": {
        "groupShortName": "EmailAlerts",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "[parameters('DistributionGroup')]",
            "emailAddress": "[parameters('DistributionGroup')]",
            "useCommonAlertSchema": true
          }
        ]
      }
    },
    {
      "copy": {
        "name": "metricAlerts_VirtualMachines",
        "count": "[length(range(0, length(parameters('MetricAlerts').virtualMachines)))]"
      },
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].name]",
      "location": "global",
      "tags": "[parameters('Tags')]",
      "properties": {
        "description": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].description]",
        "severity": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].severity]",
        "enabled": false,
        "scopes": "[parameters('SessionHostsResourceGroupIds')]",
        "evaluationFrequency": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].evaluationFrequency]",
        "windowSize": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].windowSize]",
        "criteria": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].criteria]",
        "autoMitigate": false,
        "targetResourceType": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].targetResourceType]",
        "targetResourceRegion": "[parameters('Location')]",
        "actions": [
          {
            "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]",
            "webHookProperties": {}
          }
        ]
      },
      "dependsOn": [
        "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
      ]
    },
    {
      "copy": {
        "name": "scheduledQueryRules",
        "count": "[length(range(0, length(parameters('LogAlerts'))))]"
      },
      "type": "Microsoft.Insights/scheduledQueryRules",
      "apiVersion": "2021-08-01",
      "name": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].name]",
      "location": "[parameters('Location')]",
      "tags": "[parameters('Tags')]",
      "properties": {
        "actions": {
          "actionGroups": [
            "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
          ],
          "customProperties": {}
        },
        "criteria": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].criteria]",
        "displayName": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].displayName]",
        "description": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].description]",
        "enabled": false,
        "evaluationFrequency": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].evaluationFrequency]",
        "scopes": [
          "[parameters('LogAnalyticsWorkspaceResourceId')]"
        ],
        "severity": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].severity]",
        "windowSize": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].windowSize]"
      },
      "dependsOn": [
        "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts",
      "apiVersion": "2021-06-22",
      "name": "[parameters('AutomationAccountName')]",
      "location": "[parameters('Location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "sku": {
          "name": "Free"
        }
      }
    },
    {
      "condition": "[greater(length(parameters('StorageAccountResourceIds')), 0)]",
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), parameters('RunbookNameGetStorage'))]",
      "location": "[parameters('Location')]",
      "properties": {
        "runbookType": "PowerShell",
        "logProgress": false,
        "logVerbose": false,
        "publishContentLink": {
          "uri": "[format('{0}{1}{2}', parameters('ScriptsRepositoryUri'), parameters('RunbookScriptGetStorage'), parameters('ScriptsRepositorySasToken'))]",
          "version": "1.0.0.0"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('StorageAccountResourceIds')), 0)]",
      "type": "Microsoft.Automation/automationAccounts/webhooks",
      "apiVersion": "2015-10-31",
      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetStorage'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]",
      "properties": {
        "isEnabled": true,
        "expiryTime": "[dateTimeAdd(parameters('Timestamp'), 'P5Y')]",
        "runbook": {
          "name": "[parameters('RunbookNameGetStorage')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetStorage'))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('StorageAccountResourceIds')), 0)]",
      "type": "Microsoft.Automation/automationAccounts/variables",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetStorage')))]",
      "properties": {
        "value": "[format('\"{0}\"', reference(resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetStorage'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss'))), '2015-10-31').uri)]",
        "isEncrypted": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetStorage'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetStorage'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('StorageAccountResourceIds')), 0)]",
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2016-06-01",
      "name": "[format('{0}-GetStorageInfo', parameters('LogicAppName'))]",
      "location": "[parameters('Location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "HTTP": {
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "[replace(reference(resourceId('Microsoft.Automation/automationAccounts/variables', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetStorage'))), '2019-06-01').value, '\"', '')]",
                "body": {
                  "CloudEnvironment": "[variables('CloudEnvironment')]",
                  "StorageAccountResourceIDs": "[parameters('StorageAccountResourceIds')]"
                }
              }
            }
          },
          "triggers": {
            "Recurrence": {
              "type": "Recurrence",
              "recurrence": {
                "frequency": "Minute",
                "interval": 5
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/variables', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetStorage')))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), parameters('RunbookNameGetHostPool'))]",
      "location": "[parameters('Location')]",
      "properties": {
        "runbookType": "PowerShell",
        "logProgress": false,
        "logVerbose": false,
        "publishContentLink": {
          "uri": "[format('{0}{1}{2}', parameters('ScriptsRepositoryUri'), parameters('RunbookScriptGetHostPool'), parameters('ScriptsRepositorySasToken'))]",
          "version": "1.0.0.0"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/webhooks",
      "apiVersion": "2015-10-31",
      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetHostPool'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]",
      "properties": {
        "isEnabled": true,
        "expiryTime": "[dateTimeAdd(parameters('Timestamp'), 'P5Y')]",
        "runbook": {
          "name": "[parameters('RunbookNameGetHostPool')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetHostPool'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/variables",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetHostPool')))]",
      "properties": {
        "value": "[format('\"{0}\"', reference(resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetHostPool'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))).uri)]",
        "isEncrypted": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetHostPool'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetHostPool'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2016-06-01",
      "name": "[format('{0}-GetHostPoolInfo', parameters('LogicAppName'))]",
      "location": "[parameters('Location')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "HTTP": {
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "[replace(reference(resourceId('Microsoft.Automation/automationAccounts/variables', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetHostPool')))).value, '\"', '')]",
                "body": {
                  "CloudEnvironment": "[variables('CloudEnvironment')]",
                  "SubscriptionId": "[variables('SubscriptionId')]"
                }
              }
            }
          },
          "triggers": {
            "Recurrence": {
              "type": "Recurrence",
              "recurrence": {
                "frequency": "Minute",
                "interval": 5
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/variables', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetHostPool')))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('LogAnalyticsWorkspaceResourceId')))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('AutomationAccountName'))]",
      "name": "[format('diag-{0}', parameters('AutomationAccountName'))]",
      "properties": {
        "logs": [
          {
            "category": "JobLogs",
            "enabled": true
          },
          {
            "category": "JobStreams",
            "enabled": true
          }
        ],
        "workspaceId": "[parameters('LogAnalyticsWorkspaceResourceId')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('StorageAccountResourceIds')))]",
      "copy": {
        "name": "storAccountMetric",
        "count": "[length(range(0, length(parameters('StorageAccountResourceIds'))))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('MetricAlert_StorageAccount_{0}', split(parameters('StorageAccountResourceIds')[range(0, length(parameters('StorageAccountResourceIds')))[copyIndex()]], '/')[8])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Location": {
            "value": "[parameters('Location')]"
          },
          "StorageAccountResourceID": {
            "value": "[parameters('StorageAccountResourceIds')[range(0, length(parameters('StorageAccountResourceIds')))[copyIndex()]]]"
          },
          "MetricAlertsStorageAcct": {
            "value": "[parameters('MetricAlerts').storageAccounts]"
          },
          "ActionGroupID": {
            "value": "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "9019018329263429485"
            }
          },
          "parameters": {
            "Location": {
              "type": "string"
            },
            "StorageAccountResourceID": {
              "type": "string"
            },
            "MetricAlertsStorageAcct": {
              "type": "array"
            },
            "ActionGroupID": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "metricAlerts_StorageAcct",
                "count": "[length(range(0, length(parameters('MetricAlertsStorageAcct'))))]"
              },
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[format('{0}-{1}', parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].name, split(parameters('StorageAccountResourceID'), '/')[8])]",
              "location": "global",
              "tags": "[parameters('Tags')]",
              "properties": {
                "severity": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].severity]",
                "enabled": false,
                "scopes": [
                  "[parameters('StorageAccountResourceID')]"
                ],
                "evaluationFrequency": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].evaluationFrequency]",
                "windowSize": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].windowSize]",
                "criteria": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].criteria]",
                "autoMitigate": false,
                "targetResourceType": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].targetResourceType]",
                "targetResourceRegion": "[parameters('Location')]",
                "actions": [
                  {
                    "actionGroupId": "[parameters('ActionGroupID')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('ANFVolumeResourceIds')), 0)]",
      "copy": {
        "name": "azureNetAppFilesMetric",
        "count": "[length(range(0, length(parameters('ANFVolumeResourceIds'))))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('MetricAlert_ANF_{0}', split(parameters('ANFVolumeResourceIds')[range(0, length(parameters('ANFVolumeResourceIds')))[copyIndex()]], '/')[12])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Location": {
            "value": "[parameters('Location')]"
          },
          "ANFVolumeResourceID": {
            "value": "[parameters('ANFVolumeResourceIds')[range(0, length(parameters('ANFVolumeResourceIds')))[copyIndex()]]]"
          },
          "MetricAlertsANF": {
            "value": "[parameters('MetricAlerts').anf]"
          },
          "ActionGroupID": {
            "value": "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "18280258020755932591"
            }
          },
          "parameters": {
            "Location": {
              "type": "string"
            },
            "MetricAlertsANF": {
              "type": "array"
            },
            "ANFVolumeResourceID": {
              "type": "string"
            },
            "ActionGroupID": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "metricAlerts_ANFVolume",
                "count": "[length(range(0, length(parameters('MetricAlertsANF'))))]"
              },
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[format('{0}-{1}', parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].name, split(parameters('ANFVolumeResourceID'), '/')[12])]",
              "location": "global",
              "tags": "[parameters('Tags')]",
              "properties": {
                "description": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].description]",
                "severity": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].severity]",
                "enabled": false,
                "scopes": [
                  "[parameters('ANFVolumeResourceID')]"
                ],
                "evaluationFrequency": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].evaluationFrequency]",
                "windowSize": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].windowSize]",
                "criteria": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].criteria]",
                "autoMitigate": false,
                "targetResourceType": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].targetResourceType]",
                "targetResourceRegion": "[parameters('Location')]",
                "actions": [
                  {
                    "actionGroupId": "[parameters('ActionGroupID')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
      ]
    },
    {
      "condition": "[greater(length(parameters('StorageAccountResourceIds')), 0)]",
      "copy": {
        "name": "fileServicesMetric",
        "count": "[length(range(0, length(parameters('StorageAccountResourceIds'))))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('MetricAlert_FileServices_{0}', range(0, length(parameters('StorageAccountResourceIds')))[copyIndex()])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Location": {
            "value": "[parameters('Location')]"
          },
          "StorageAccountResourceID": {
            "value": "[parameters('StorageAccountResourceIds')[range(0, length(parameters('StorageAccountResourceIds')))[copyIndex()]]]"
          },
          "MetricAlertsFileShares": {
            "value": "[parameters('MetricAlerts').fileShares]"
          },
          "ActionGroupID": {
            "value": "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "9573725674197826024"
            }
          },
          "parameters": {
            "Location": {
              "type": "string"
            },
            "StorageAccountResourceID": {
              "type": "string"
            },
            "MetricAlertsFileShares": {
              "type": "array"
            },
            "ActionGroupID": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "variables": {
            "FileServicesResourceID": "[format('{0}/fileServices/default', parameters('StorageAccountResourceID'))]"
          },
          "resources": [
            {
              "copy": {
                "name": "metricAlerts_FileShares",
                "count": "[length(range(0, length(parameters('MetricAlertsFileShares'))))]"
              },
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[format('{0}-{1}', parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].name, split(variables('FileServicesResourceID'), '/')[8])]",
              "location": "global",
              "tags": "[parameters('Tags')]",
              "properties": {
                "description": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].description]",
                "severity": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].severity]",
                "enabled": false,
                "scopes": [
                  "[variables('FileServicesResourceID')]"
                ],
                "evaluationFrequency": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].evaluationFrequency]",
                "windowSize": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].windowSize]",
                "criteria": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].criteria]",
                "autoMitigate": false,
                "targetResourceType": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].targetResourceType]",
                "targetResourceRegion": "[parameters('Location')]",
                "actions": [
                  {
                    "actionGroupId": "[parameters('ActionGroupID')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "automationAccountPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2021-06-22', 'full').identity.principalId]"
    }
  }
}