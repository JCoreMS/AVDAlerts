{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.10.61.36676",
      "templateHash": "4755628051878152493"
    }
  },
  "parameters": {
    "AlertNamePrefix": {
      "type": "string",
      "defaultValue": "AVD-",
      "metadata": {
        "description": "Alert Name Prefix"
      }
    },
    "DistributionGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Distribution Group that will receive email alerts for AVD."
      }
    },
    "Environment": {
      "type": "string",
      "defaultValue": "t",
      "metadata": {
        "description": "The environment is which these resources will be deployed, i.e. Development."
      },
      "allowedValues": [
        "d",
        "p",
        "t"
      ]
    },
    "Location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Azure Region for Resources"
      }
    },
    "LogAnalyticsWorkspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "The Resource ID for the Log Analytics Workspace."
      }
    },
    "ScriptsRepositorySasToken": {
      "type": "secureString",
      "metadata": {
        "description": "The SAS token if using a storage account for the repository."
      }
    },
    "ScriptsRepositoryUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/JCoreMS/AVDAlerts/main/deploySubscription/scripts/",
      "metadata": {
        "description": "The repository URI hosting the scripts for this solution."
      }
    },
    "SessionHostsResourceGroupIds": {
      "type": "array",
      "metadata": {
        "description": "The Resource Group ID for the AVD session host VMs."
      }
    },
    "StorageAccountResourceIds": {
      "type": "array",
      "metadata": {
        "description": "The Resource IDs for the Azure Files Storage Accounts used for FSLogix profile storage."
      }
    },
    "ANFVolumeResourceIds": {
      "type": "array",
      "metadata": {
        "description": "The Resource IDs for the Azure NetApp Volumes used for FSLogix profile storage."
      }
    },
    "Tags": {
      "type": "object",
      "defaultValue": {}
    }
  },
  "variables": {
    "AutomationAccountName": "[format('aa-avdmetrics-{0}-{1}', parameters('Environment'), parameters('Location'))]",
    "ActionGroupName": "[format('ag-avdmetrics-{0}-{1}', parameters('Environment'), parameters('Location'))]",
    "LogicAppName": "[format('la-avdmetrics-{0}-{1}', parameters('Environment'), parameters('Location'))]",
    "ResourceGroupName": "[format('rg-avdmetrics-{0}-{1}', parameters('Environment'), parameters('Location'))]",
    "RunbookNameGetStorage": "AvdStorageLogData",
    "RunbookNameGetHostPool": "AvdHostPoolLogData",
    "RunbookScriptGetStorage": "Get-AzureAvdLogs.ps1",
    "RunbookScriptGetHostPool": "Get-HostPoolInfo.ps1",
    "AlertDescriptionHeader": "Automated AVD Alert Deployment Solution (v0.5)\n",
    "RoleAssignments": {
      "DesktopVirtualizationRead": {
        "Name": "Desktop-Virtualization-Reader",
        "GUID": "49a72310-ab8d-41df-bbb0-79b649203868"
      },
      "StoreKeyRead": {
        "Name": "Storage-Acct-Key-Reader-Data-Access",
        "GUID": "c12c1c16-33a1-487b-954d-41c89c60f349"
      }
    },
    "LogAlerts": [
      {
        "name": "[format('{0}HostPool-No Resources Available', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}HostPool-No Resources Available', parameters('AlertNamePrefix'))]",
        "description": "[variables('AlertDescriptionHeader')]",
        "severity": 1,
        "evaluationFrequency": "PT15M",
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "WVDConnections \n| where TimeGenerated > ago (15m) \n| project-away TenantId,SourceSystem  \n| summarize arg_max(TimeGenerated, *), StartTime =  min(iff(State== 'Started', TimeGenerated , datetime(null) )), ConnectTime = min(iff(State== 'Connected', TimeGenerated , datetime(null) ))   by CorrelationId  \n| join kind=leftouter (WVDErrors\n    |summarize Errors=makelist(pack('Code', Code, 'CodeSymbolic', CodeSymbolic, 'Time', TimeGenerated, 'Message', Message ,'ServiceError', ServiceError, 'Source', Source)) by CorrelationId  \n    ) on CorrelationId\n| join kind=leftouter (WVDCheckpoints\n    | summarize Checkpoints=makelist(pack('Time', TimeGenerated, 'Name', Name, 'Parameters', Parameters, 'Source', Source)) by CorrelationId  \n    | mv-apply Checkpoints on (  \n        order by todatetime(Checkpoints['Time']) asc\n        | summarize Checkpoints=makelist(Checkpoints)\n        )\n    ) on CorrelationId  \n| project-away CorrelationId1, CorrelationId2  \n| order by TimeGenerated desc\n| where Errors[0].CodeSymbolic == \"ConnectionFailedNoHealthyRdshAvailable\"\n\n",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "UserName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "SessionHostName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "resourceIdColumn": "_ResourceId",
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}HostPool-Disconnected User over 24 Hours', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}HostPool-Disconnected User over 24 Hours', parameters('AlertNamePrefix'))]",
        "description": "[variables('AlertDescriptionHeader')]",
        "severity": 2,
        "evaluationFrequency": "PT1H",
        "windowSize": "PT1H",
        "criteria": {
          "allOf": [
            {
              "query": "// Session duration \n// Lists users by session duration in the last 24 hours. \n// The \"State\" provides information on the connection stage of an activity.\n// The delta between \"Connected\" and \"Completed\" provides the connection time for a specific connection.\nWVDConnections \n| where TimeGenerated > ago(24h) \n| where State == \"Connected\"  \n| project CorrelationId , UserName, ConnectionType, StartTime=TimeGenerated, SessionHostName\n| join (WVDConnections  \n    | where State == \"Completed\"  \n    | project EndTime=TimeGenerated, CorrelationId)  \n    on CorrelationId  \n| project Duration = EndTime - StartTime, ConnectionType, UserName, SessionHostName\n| where Duration >= timespan(24:00:00)\n| sort by Duration desc",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "UserName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "SessionHostName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}HostPool-Disconnected User over 72 Hours', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}HostPool-Disconnected User over 72 Hours', parameters('AlertNamePrefix'))]",
        "description": "[variables('AlertDescriptionHeader')]",
        "severity": 1,
        "evaluationFrequency": "PT1H",
        "windowSize": "PT1H",
        "criteria": {
          "allOf": [
            {
              "query": "// Session duration \n// Lists users by session duration in the last 24 hours. \n// The \"State\" provides information on the connection stage of an activity.\n// The delta between \"Connected\" and \"Completed\" provides the connection time for a specific connection.\nWVDConnections \n| where TimeGenerated > ago(24h) \n| where State == \"Connected\"  \n| project CorrelationId , UserName, ConnectionType, StartTime=TimeGenerated, SessionHostName\n| join (WVDConnections  \n    | where State == \"Completed\"  \n    | project EndTime=TimeGenerated, CorrelationId)  \n    on CorrelationId  \n| project Duration = EndTime - StartTime, ConnectionType, UserName, SessionHostName\n| where Duration >= timespan(72:00:00)\n| sort by Duration desc",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "UserName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "SessionHostName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}VM-Local Disk Free Space 10 Percent', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}VM-Local Disk Free Space 10%', parameters('AlertNamePrefix'))]",
        "description": "[variables('AlertDescriptionHeader')]",
        "severity": 2,
        "evaluationFrequency": "PT15M",
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "Perf\n| where TimeGenerated > ago(15m)\n| where ObjectName == \"LogicalDisk\" and CounterName == \"% Free Space\"\n| where InstanceName !contains \"D:\"\n| where InstanceName  !contains \"_Total\"| where CounterValue <= 10.00",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "Computer",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "CounterValue",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "resourceIdColumn": "_ResourceId",
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}VM-Local Disk Free Space 5 Percent', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}VM-Local Disk Free Space 5%', parameters('AlertNamePrefix'))]",
        "description": "[variables('AlertDescriptionHeader')]",
        "severity": 1,
        "evaluationFrequency": "PT15M",
        "windowSize": "PT15M",
        "criteria": {
          "allOf": [
            {
              "query": "Perf\n| where TimeGenerated > ago(15m)\n| where ObjectName == \"LogicalDisk\" and CounterName == \"% Free Space\"\n| where InstanceName !contains \"D:\"\n| where InstanceName  !contains \"_Total\"| where CounterValue <= 5.00",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "Computer",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "CounterValue",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "resourceIdColumn": "_ResourceId",
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}VM-FSLogix Profile Failed', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}VM-FSLogix Profile Failed (Event Log Indicated Failure)', parameters('AlertNamePrefix'))]",
        "description": "[variables('AlertDescriptionHeader')]",
        "severity": 1,
        "evaluationFrequency": "PT5M",
        "windowSize": "PT5M",
        "criteria": {
          "allOf": [
            {
              "query": "Event\n| where EventLog == \"Microsoft-FSLogix-Apps/Admin\"\n| where EventLevelName == \"Error\"\n\n",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "Computer",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "RenderedDescription",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}VM-Health Check Failure', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}VM-Health Check Failure', parameters('AlertNamePrefix'))]",
        "description": "[format('{0}VM is available for use but one of the dependent resources is in a failed state', variables('AlertDescriptionHeader'))]",
        "severity": 1,
        "evaluationFrequency": "PT5M",
        "windowSize": "PT5M",
        "overrideQueryTimeRange": "P2D",
        "criteria": {
          "allOf": [
            {
              "query": "// HealthChecks of SessionHost \n// Renders a summary of SessionHost health status. \nlet MapToDesc = (idx:long) {\n    case(idx == 0,  \"DomainJoin\",\n         idx == 1,  \"DomainTrust\",\n         idx == 2,  \"FSLogix\",\n         idx == 3,  \"SxSStack\",\n         idx == 4,  \"URLCheck\",\n         idx == 5,  \"GenevaAgent\",\n         idx == 6,  \"DomainReachable\",\n         idx == 7,  \"WebRTCRedirector\",\n         idx == 8,  \"SxSStackEncryption\",\n         idx == 9,  \"IMDSReachable\",\n         idx == 10, \"MSIXPackageStaging\",\n         \"InvalidIndex\")\n};\nWVDAgentHealthStatus\n| where TimeGenerated > ago(10m)\n| where Status != 'Available'\n| where AllowNewSessions = True\n| extend CheckFailed = parse_json(SessionHostHealthCheckResult)\n| mv-expand CheckFailed\n| where CheckFailed.AdditionalFailureDetails.ErrorCode != 0\n| extend HealthCheckName = tolong(CheckFailed.HealthCheckName)\n| extend HealthCheckResult = tolong(CheckFailed.HealthCheckResult)\n| extend HealthCheckDesc = MapToDesc(HealthCheckName)\n\n",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "SessionHostName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "HealthCheckDesc",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}Storage-Low Space on Azure File Share-15 Percent Remaining', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}Storage-Low Space on Azure File Share-15% Remaining', parameters('AlertNamePrefix'))]",
        "description": "[format('{0}This alert is based on the Action Account and Runbook that populates the Log Analytics specificed with the AVD Metrics Deployment Solution.\n-->Last Number in the string is the Percentage Remaining for the Share.\nOutput: ResultsDescription\nStorageType,Subscription,ResourceGroup,StorageAccount,ShareName,Quota,GBUsed,PercentRemaining', variables('AlertDescriptionHeader'))]",
        "severity": 2,
        "evaluationFrequency": "PT10M",
        "windowSize": "PT1H",
        "overrideQueryTimeRange": "P2D",
        "criteria": {
          "allOf": [
            {
              "query": "          AzureDiagnostics \r\n          | where Category has \"JobStreams\" and StreamType_s == \"Output\" and RunbookName_s == \"AvdStorageLogData\"\r\n          | sort by TimeGenerated\r\n          //  StorageType / Subscription / RG / StorAcct / Share / Quota / GB Used / %Available\r\n          | extend StorageType=split(ResultDescription, ',')[0]\r\n          | extend Subscription=split(ResultDescription, ',')[1]\r\n          | extend ResourceGroup=split(ResultDescription, ',')[2]\r\n          | extend StorageAccount=split(ResultDescription, ',')[3]\r\n          | extend Share=split(ResultDescription, ',')[4]\r\n          | extend GBShareQuota=split(ResultDescription, ',')[5]\r\n          | extend GBUsed=split(ResultDescription, ',')[6]\r\n          | extend PercentAvailable=split(ResultDescription, ',')[7]\r\n          | where PercentAvailable <= 15.00 and PercentAvailable < 5.00          \r\n           ",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "ResultDescription",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "resourceIdColumng": "_ResourceId",
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}Storage-Low Space on Azure File Share-5 Percent Remaining', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}Storage-Low Space on Azure File Share-5% Remaining', parameters('AlertNamePrefix'))]",
        "description": "[format('{0}This alert is based on the Action Account and Runbook that populates the Log Analytics specificed with the AVD Metrics Deployment Solution.\n-->Last Number in the string is the Percentage Remaining for the Share.\nOutput: ResultsDescription\nStorageType,Subscription,ResourceGroup,StorageAccount,ShareName,Quota,GBUsed,PercentRemaining', variables('AlertDescriptionHeader'))]",
        "severity": 1,
        "evaluationFrequency": "PT10M",
        "windowSize": "PT1H",
        "overrideQueryTimeRange": "P2D",
        "criteria": {
          "allOf": [
            {
              "query": "          AzureDiagnostics \r\n          | where Category has \"JobStreams\" and StreamType_s == \"Output\" and RunbookName_s == \"AvdStorageLogData\"\r\n          | sort by TimeGenerated\r\n          //  StorageType / Subscription / RG / StorAcct / Share / Quota / GB Used / %Available\r\n          | extend StorageType=split(ResultDescription, ',')[0]\r\n          | extend Subscription=split(ResultDescription, ',')[1]\r\n          | extend ResourceGroup=split(ResultDescription, ',')[2]\r\n          | extend StorageAccount=split(ResultDescription, ',')[3]\r\n          | extend Share=split(ResultDescription, ',')[4]\r\n          | extend GBShareQuota=split(ResultDescription, ',')[5]\r\n          | extend GBUsed=split(ResultDescription, ',')[6]\r\n          | extend PercentAvailable=split(ResultDescription, ',')[7]\r\n          | where PercentAvailable <= 5.00          \r\n           ",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "ResultDescription",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "resourceIdColumng": "_ResourceId",
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}HostPool-Capacity-85Percent', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}HostPool-Capacity 85%', parameters('AlertNamePrefix'))]",
        "description": "[format('{0}This alert is based on the Action Account and Runbook that populates the Log Analytics specificed with the AVD Metrics Deployment Solution.\n-->Last Number in the string is the Percentage Remaining for the Host Pool\nOutput is:\nHostPoolName|ResourceGroup|Type|MaxSessionLimit|NumberHosts|TotalUsers|DisconnectedUser|ActiveUsers|SessionsAvailable|HostPoolPercentageLoad', variables('AlertDescriptionHeader'))]",
        "severity": 2,
        "evaluationFrequency": "PT5M",
        "windowSize": "PT5M",
        "overrideQueryTimeRange": "P2D",
        "criteria": {
          "allOf": [
            {
              "query": "          AzureDiagnostics \r\n          | where Category has \"JobStreams\" and StreamType_s == \"Output\" and RunbookName_s == \"AvdHostPoolLogData\"\r\n          | sort by TimeGenerated\r\n          | where TimeGenerated > now() - 5m\r\n          | extend HostPoolName=tostring(split(ResultDescription, '|')[0])\r\n          | extend ResourceGroup=tostring(split(ResultDescription, '|')[1])\r\n          | extend Type=tostring(split(ResultDescription, '|')[2])\r\n          | extend MaxSessionLimit=toint(split(ResultDescription, '|')[3])\r\n          | extend NumberSessionHosts=toint(split(ResultDescription, '|')[4])\r\n          | extend UserSessionsTotal=toint(split(ResultDescription, '|')[5])\r\n          | extend UserSessionsDisconnected=toint(split(ResultDescription, '|')[6])\r\n          | extend UserSessionsActive=toint(split(ResultDescription, '|')[7])\r\n          | extend UserSessionsAvailable=toint(split(ResultDescription, '|')[8])\r\n          | extend HostPoolPercentLoad=toint(split(ResultDescription, '|')[9])\r\n          | where HostPoolPercentLoad >= 85         \r\n           ",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "HostPoolName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "UserSessionsTotal",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "UserSessionsDisconnected",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "UserSessionsActive",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "UserSessionsAvailable",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "HostPoolPercentLoad",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "resourceIdColumng": "_ResourceId",
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      },
      {
        "name": "[format('{0}HostPool-Capacity-95Percent', parameters('AlertNamePrefix'))]",
        "displayName": "[format('{0}HostPool-Capacity 95%', parameters('AlertNamePrefix'))]",
        "description": "[format('{0}This alert is based on the Action Account and Runbook that populates the Log Analytics specificed with the AVD Metrics Deployment Solution.\n-->Last Number in the string is the Percentage Remaining for the Host Pool\nOutput is:\nHostPoolName|ResourceGroup|Type|MaxSessionLimit|NumberHosts|TotalUsers|DisconnectedUser|ActiveUsers|SessionsAvailable|HostPoolPercentageLoad', variables('AlertDescriptionHeader'))]",
        "severity": 1,
        "evaluationFrequency": "PT5M",
        "windowSize": "PT5M",
        "overrideQueryTimeRange": "P2D",
        "criteria": {
          "allOf": [
            {
              "query": "          AzureDiagnostics \r\n          | where Category has \"JobStreams\" and StreamType_s == \"Output\" and RunbookName_s == \"AvdHostPoolLogData\"\r\n          | sort by TimeGenerated\r\n          | where TimeGenerated > now() - 5m\r\n          | extend HostPoolName=tostring(split(ResultDescription, '|')[0])\r\n          | extend ResourceGroup=tostring(split(ResultDescription, '|')[1])\r\n          | extend Type=tostring(split(ResultDescription, '|')[2])\r\n          | extend MaxSessionLimit=toint(split(ResultDescription, '|')[3])\r\n          | extend NumberSessionHosts=toint(split(ResultDescription, '|')[4])\r\n          | extend UserSessionsTotal=toint(split(ResultDescription, '|')[5])\r\n          | extend UserSessionsDisconnected=toint(split(ResultDescription, '|')[6])\r\n          | extend UserSessionsActive=toint(split(ResultDescription, '|')[7])\r\n          | extend UserSessionsAvailable=toint(split(ResultDescription, '|')[8])\r\n          | extend HostPoolPercentLoad=toint(split(ResultDescription, '|')[9])\r\n          | where HostPoolPercentLoad >= 95         \r\n           ",
              "timeAggregation": "Count",
              "dimensions": [
                {
                  "name": "HostPoolName",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "UserSessionsTotal",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "UserSessionsDisconnected",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "UserSessionsActive",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "UserSessionsAvailable",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                },
                {
                  "name": "HostPoolPercentLoad",
                  "operator": "Include",
                  "values": [
                    "*"
                  ]
                }
              ],
              "resourceIdColumng": "_ResourceId",
              "operator": "GreaterThanOrEqual",
              "threshold": 1,
              "failingPeriods": {
                "numberOfEvaluationPeriods": 1,
                "minFailingPeriodsToAlert": 1
              }
            }
          ]
        }
      }
    ],
    "MetricAlerts": {
      "storageAccounts": [
        {
          "name": "[format('{0}Storage-Over 200ms Latency for Storage Acct', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}Storage-Over 200ms Latency for Storage Acct', parameters('AlertNamePrefix'))]",
          "description": "[format('{0}\nThis could indicate a lag or poor performance for user Profiles or Apps using MSIX App Attach.', variables('AlertDescriptionHeader'))]",
          "severity": 2,
          "evaluationFrequency": "PT15M",
          "windowSize": "PT15M",
          "criteria": {
            "allOf": [
              {
                "threshold": 200,
                "name": "Metric1",
                "metricName": "SuccessServerLatency",
                "operator": "GreaterThan",
                "timeAggregation": "Average",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "Microsoft.Storage/storageAccounts"
        },
        {
          "name": "[format('{0}Storage-Azure Files Availability', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}Storage-Azure Files Availability', parameters('AlertNamePrefix'))]",
          "description": "[format('{0}\nThis could indicate storage is unavailable for user Profiles or Apps using MSIX App Attach.', variables('AlertDescriptionHeader'))]",
          "severity": 1,
          "evaluationFrequency": "PT5M",
          "windowSize": "PT5M",
          "criteria": {
            "allOf": [
              {
                "threshold": 99,
                "name": "Metric1",
                "metricName": "Availability",
                "operator": "LessThanOrEqual",
                "timeAggregation": "Average",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "Microsoft.Storage/storageAccounts"
        }
      ],
      "fileShares": [
        {
          "name": "[format('{0}Storage-Possible Throttling Due to High IOPs', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}Storage-Possible Throttling Due to High IOPs', parameters('AlertNamePrefix'))]",
          "description": "[format('{0}\nThis indicates you may be maxing out the allowed IOPs.\nhttps://docs.microsoft.com/en-us/azure/storage/files/storage-troubleshooting-files-performance#how-to-create-an-alert-if-a-file-share-is-throttled', variables('AlertDescriptionHeader'))]",
          "severity": 2,
          "evaluationFrequency": "PT15M",
          "windowSize": "PT15M",
          "criteria": {
            "allOf": [
              {
                "threshold": 1,
                "name": "Metric1",
                "metricName": "Transactions",
                "dimensions": [
                  {
                    "name": "ResponseType",
                    "operator": "Include",
                    "values": [
                      "SuccessWithThrottling",
                      "SuccessWithShareIopsThrottling",
                      "ClientShareIopsThrottlingError"
                    ]
                  },
                  {
                    "name": "FileShare",
                    "operator": "Include",
                    "values": [
                      "SuccessWithShareEgressThrottling",
                      "SuccessWithShareIngressThrottling",
                      "SuccessWithShareIopsThrottling",
                      "ClientShareEgressThrottlingError",
                      "ClientShareIngressThrottlingError",
                      "ClientShareIopsThrottlingError"
                    ]
                  }
                ],
                "operator": "GreaterThanOrEqual",
                "timeAggregation": "Total",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "Microsoft.Storage/storageAccounts/fileServices"
        }
      ],
      "anf": [
        {
          "name": "[format('{0}Storage-Low Space on ANF Share-15 Percent Remaining', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}Storage-Low Space on ANF Share-15% Remaining', parameters('AlertNamePrefix'))]",
          "description": "[variables('AlertDescriptionHeader')]",
          "severity": 2,
          "evaluationFrequency": "PT1H",
          "windowSize": "PT1H",
          "criteria": {
            "allOf": [
              {
                "threshold": 85,
                "name": "Metric1",
                "metricNamespace": "microsoft.netapp/netappaccounts/capacitypools/volumes",
                "metricName": "VolumeConsumedSizePercentage",
                "operator": "GreaterThanOrEqual",
                "timeAggregation": "Average",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes"
        },
        {
          "name": "[format('{0}Storage-Low Space on ANF Share-5 Percent Remaining', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}Storage-Low Space on ANF Share-5% Remaining', parameters('AlertNamePrefix'))]",
          "description": "[variables('AlertDescriptionHeader')]",
          "severity": 1,
          "evaluationFrequency": "PT1H",
          "windowSize": "PT1H",
          "criteria": {
            "allOf": [
              {
                "threshold": 95,
                "name": "Metric1",
                "metricNamespace": "microsoft.netapp/netappaccounts/capacitypools/volumes",
                "metricName": "VolumeConsumedSizePercentage",
                "operator": "GreaterThanOrEqual",
                "timeAggregation": "Average",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes"
        }
      ],
      "virtualMachines": [
        {
          "name": "[format('{0}VM-High CPU 85 Percent', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}VM-High CPU 85%', parameters('AlertNamePrefix'))]",
          "description": "[variables('AlertDescriptionHeader')]",
          "severity": 2,
          "evaluationFrequency": "PT5M",
          "windowSize": "PT5M",
          "criteria": {
            "allOf": [
              {
                "threshold": 85,
                "name": "Metric1",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "metricName": "Percentage CPU",
                "operator": "GreaterThan",
                "timeAggregation": "Average",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "microsoft.compute/virtualmachines"
        },
        {
          "name": "[format('{0}VM-High CPU 95 Percent', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}VM-High CPU 95%', parameters('AlertNamePrefix'))]",
          "description": "[variables('AlertDescriptionHeader')]",
          "severity": 1,
          "evaluationFrequency": "PT5M",
          "windowSize": "PT5M",
          "criteria": {
            "allOf": [
              {
                "threshold": 95,
                "name": "Metric1",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "metricName": "Percentage CPU",
                "operator": "GreaterThan",
                "timeAggregation": "Average",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "microsoft.compute/virtualmachines"
        },
        {
          "name": "[format('{0}VM-Available Memory Less Than 2GB', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}VM-Available Memory Less Than 2GB', parameters('AlertNamePrefix'))]",
          "description": "[variables('AlertDescriptionHeader')]",
          "severity": 2,
          "evaluationFrequency": "PT5M",
          "windowSize": "PT5M",
          "criteria": {
            "allOf": [
              {
                "threshold": 2147483648,
                "name": "Metric1",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "metricName": "Available Memory Bytes",
                "operator": "LessThanOrEqual",
                "timeAggregation": "Average",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "microsoft.compute/virtualmachines"
        },
        {
          "name": "[format('{0}VM-Available Memory Less Than 1GB', parameters('AlertNamePrefix'))]",
          "displayName": "[format('{0}VM-Available Memory Less Than 1GB', parameters('AlertNamePrefix'))]",
          "description": "[variables('AlertDescriptionHeader')]",
          "severity": 1,
          "evaluationFrequency": "PT5M",
          "windowSize": "PT5M",
          "criteria": {
            "allOf": [
              {
                "threshold": 1073741824,
                "name": "Metric1",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "metricName": "Available Memory Bytes",
                "operator": "LessThanOrEqual",
                "timeAggregation": "Average",
                "criterionType": "StaticThresholdCriterion"
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
          },
          "targetResourceType": "microsoft.compute/virtualmachines"
        }
      ]
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[variables('ResourceGroupName')]",
      "location": "[parameters('Location')]"
    },
    {
      "copy": {
        "name": "roleAssignment_Subscription",
        "count": "[length(items(variables('RoleAssignments')))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(subscription().id, variables('AutomationAccountName'), items(variables('RoleAssignments'))[copyIndex()].value.Name)]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', items(variables('RoleAssignments'))[copyIndex()].value.GUID)]",
        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroupName')), 'Microsoft.Resources/deployments', 'MonitoringResourcesDeployment')).outputs.automationAccountPrincipalId.value]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('ResourceGroupName')), 'Microsoft.Resources/deployments', 'MonitoringResourcesDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "MonitoringResourcesDeployment",
      "resourceGroup": "[variables('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "AlertNamePrefix": {
            "value": "[parameters('AlertNamePrefix')]"
          },
          "AutomationAccountName": {
            "value": "[variables('AutomationAccountName')]"
          },
          "DistributionGroup": {
            "value": "[parameters('DistributionGroup')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "LogAnalyticsWorkspaceResourceId": {
            "value": "[parameters('LogAnalyticsWorkspaceResourceId')]"
          },
          "LogAlerts": {
            "value": "[variables('LogAlerts')]"
          },
          "LogicAppName": {
            "value": "[variables('LogicAppName')]"
          },
          "MetricAlerts": {
            "value": "[variables('MetricAlerts')]"
          },
          "RunbookNameGetStorage": {
            "value": "[variables('RunbookNameGetStorage')]"
          },
          "RunbookNameGetHostPool": {
            "value": "[variables('RunbookNameGetHostPool')]"
          },
          "RunbookScriptGetStorage": {
            "value": "[variables('RunbookScriptGetStorage')]"
          },
          "RunbookScriptGetHostPool": {
            "value": "[variables('RunbookScriptGetHostPool')]"
          },
          "ScriptsRepositorySasToken": {
            "value": "[parameters('ScriptsRepositorySasToken')]"
          },
          "ScriptsRepositoryUri": {
            "value": "[parameters('ScriptsRepositoryUri')]"
          },
          "SessionHostsResourceGroupIds": {
            "value": "[parameters('SessionHostsResourceGroupIds')]"
          },
          "StorageAccountResourceIds": {
            "value": "[parameters('StorageAccountResourceIds')]"
          },
          "ActionGroupName": {
            "value": "[variables('ActionGroupName')]"
          },
          "ANFVolumeResourceIds": {
            "value": "[parameters('ANFVolumeResourceIds')]"
          },
          "Tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.10.61.36676",
              "templateHash": "12529378496299127198"
            }
          },
          "parameters": {
            "ActionGroupName": {
              "type": "string"
            },
            "AlertNamePrefix": {
              "type": "string"
            },
            "AutomationAccountName": {
              "type": "string"
            },
            "DistributionGroup": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "LogAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "LogAlerts": {
              "type": "array"
            },
            "LogicAppName": {
              "type": "string"
            },
            "MetricAlerts": {
              "type": "object"
            },
            "RunbookNameGetStorage": {
              "type": "string"
            },
            "RunbookNameGetHostPool": {
              "type": "string"
            },
            "RunbookScriptGetStorage": {
              "type": "string"
            },
            "RunbookScriptGetHostPool": {
              "type": "string"
            },
            "ScriptsRepositorySasToken": {
              "type": "secureString"
            },
            "ScriptsRepositoryUri": {
              "type": "string"
            },
            "SessionHostsResourceGroupIds": {
              "type": "array"
            },
            "StorageAccountResourceIds": {
              "type": "array"
            },
            "Tags": {
              "type": "object"
            },
            "Timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('u')]"
            },
            "ANFVolumeResourceIds": {
              "type": "array"
            }
          },
          "variables": {
            "SubscriptionId": "[subscription().subscriptionId]",
            "CloudEnvironment": "[environment().name]"
          },
          "resources": [
            {
              "type": "microsoft.insights/actionGroups",
              "apiVersion": "2019-06-01",
              "name": "[parameters('ActionGroupName')]",
              "location": "global",
              "properties": {
                "groupShortName": "EmailAlerts",
                "enabled": true,
                "emailReceivers": [
                  {
                    "name": "[parameters('DistributionGroup')]",
                    "emailAddress": "[parameters('DistributionGroup')]",
                    "useCommonAlertSchema": true
                  }
                ]
              }
            },
            {
              "copy": {
                "name": "metricAlerts_VirtualMachines",
                "count": "[length(range(0, length(parameters('MetricAlerts').virtualMachines)))]"
              },
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].name]",
              "location": "global",
              "tags": "[parameters('Tags')]",
              "properties": {
                "description": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].description]",
                "severity": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].severity]",
                "enabled": false,
                "scopes": "[parameters('SessionHostsResourceGroupIds')]",
                "evaluationFrequency": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].evaluationFrequency]",
                "windowSize": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].windowSize]",
                "criteria": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].criteria]",
                "autoMitigate": false,
                "targetResourceType": "[parameters('MetricAlerts').virtualMachines[range(0, length(parameters('MetricAlerts').virtualMachines))[copyIndex()]].targetResourceType]",
                "targetResourceRegion": "[parameters('Location')]",
                "actions": [
                  {
                    "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]",
                    "webHookProperties": {}
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
              ]
            },
            {
              "copy": {
                "name": "scheduledQueryRules",
                "count": "[length(range(0, length(parameters('LogAlerts'))))]"
              },
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-08-01",
              "name": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].name]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "actions": {
                  "actionGroups": [
                    "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
                  ],
                  "customProperties": {}
                },
                "criteria": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].criteria]",
                "displayName": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].displayName]",
                "description": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].description]",
                "enabled": false,
                "evaluationFrequency": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].evaluationFrequency]",
                "scopes": [
                  "[parameters('LogAnalyticsWorkspaceResourceId')]"
                ],
                "severity": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].severity]",
                "windowSize": "[parameters('LogAlerts')[range(0, length(parameters('LogAlerts')))[copyIndex()]].windowSize]"
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Automation/automationAccounts",
              "apiVersion": "2021-06-22",
              "name": "[parameters('AutomationAccountName')]",
              "location": "[parameters('Location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "sku": {
                  "name": "Free"
                }
              }
            },
            {
              "condition": "[not(empty(parameters('LogAnalyticsWorkspaceResourceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('AutomationAccountName'))]",
              "name": "[format('diag-{0}', parameters('AutomationAccountName'))]",
              "properties": {
                "logs": [
                  {
                    "category": "JobLogs",
                    "enabled": true
                  },
                  {
                    "category": "JobStreams",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('LogAnalyticsWorkspaceResourceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName'))]"
              ]
            },
            {
              "condition": "[greater(length(parameters('StorageAccountResourceIds')), 0)]",
              "copy": {
                "name": "storAccountMetric",
                "count": "[length(range(0, length(parameters('StorageAccountResourceIds'))))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('MetricAlert_StorageAccount_{0}', split(parameters('StorageAccountResourceIds')[range(0, length(parameters('StorageAccountResourceIds')))[copyIndex()]], '/')[8])]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Location": {
                    "value": "[parameters('Location')]"
                  },
                  "StorageAccountResourceID": {
                    "value": "[parameters('StorageAccountResourceIds')[range(0, length(parameters('StorageAccountResourceIds')))[copyIndex()]]]"
                  },
                  "MetricAlertsStorageAcct": {
                    "value": "[parameters('MetricAlerts').storageAccounts]"
                  },
                  "ActionGroupID": {
                    "value": "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
                  },
                  "Tags": {
                    "value": "[parameters('Tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "6089856453449429822"
                    }
                  },
                  "parameters": {
                    "Location": {
                      "type": "string"
                    },
                    "StorageAccountResourceID": {
                      "type": "string"
                    },
                    "MetricAlertsStorageAcct": {
                      "type": "array"
                    },
                    "ActionGroupID": {
                      "type": "string"
                    },
                    "Tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "metricAlerts_StorageAcct",
                        "count": "[length(range(0, length(parameters('MetricAlertsStorageAcct'))))]"
                      },
                      "type": "Microsoft.Insights/metricAlerts",
                      "apiVersion": "2018-03-01",
                      "name": "[format('{0}-{1}', parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].name, split(parameters('StorageAccountResourceID'), '/')[8])]",
                      "location": "global",
                      "tags": "[parameters('Tags')]",
                      "properties": {
                        "severity": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].severity]",
                        "enabled": false,
                        "scopes": [
                          "[parameters('StorageAccountResourceID')]"
                        ],
                        "evaluationFrequency": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].evaluationFrequency]",
                        "windowSize": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].windowSize]",
                        "criteria": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].criteria]",
                        "autoMitigate": false,
                        "targetResourceType": "[parameters('MetricAlertsStorageAcct')[range(0, length(parameters('MetricAlertsStorageAcct')))[copyIndex()]].targetResourceType]",
                        "targetResourceRegion": "[parameters('Location')]",
                        "actions": [
                          {
                            "actionGroupId": "[parameters('ActionGroupID')]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
              ]
            },
            {
              "condition": "[greater(length(parameters('ANFVolumeResourceIds')), 0)]",
              "copy": {
                "name": "azureNetAppFilesMetric",
                "count": "[length(range(0, length(parameters('ANFVolumeResourceIds'))))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('MetricAlert_ANF_{0}', split(parameters('ANFVolumeResourceIds')[range(0, length(parameters('ANFVolumeResourceIds')))[copyIndex()]], '/')[12])]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "AlertNamePrefix": {
                    "value": "[parameters('AlertNamePrefix')]"
                  },
                  "Location": {
                    "value": "[parameters('Location')]"
                  },
                  "ANFVolumeResourceID": {
                    "value": "[parameters('ANFVolumeResourceIds')[range(0, length(parameters('ANFVolumeResourceIds')))[copyIndex()]]]"
                  },
                  "MetricAlertsANF": {
                    "value": "[parameters('MetricAlerts').anf]"
                  },
                  "ActionGroupID": {
                    "value": "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
                  },
                  "Tags": {
                    "value": "[parameters('Tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "3063835615287208544"
                    }
                  },
                  "parameters": {
                    "AlertNamePrefix": {
                      "type": "string"
                    },
                    "Location": {
                      "type": "string"
                    },
                    "MetricAlertsANF": {
                      "type": "array"
                    },
                    "ANFVolumeResourceID": {
                      "type": "string"
                    },
                    "ActionGroupID": {
                      "type": "string"
                    },
                    "Tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "metricAlerts_ANFVolume",
                        "count": "[length(range(0, length(parameters('MetricAlertsANF'))))]"
                      },
                      "type": "Microsoft.Insights/metricAlerts",
                      "apiVersion": "2018-03-01",
                      "name": "[format('{0}{1}-{2}', parameters('AlertNamePrefix'), parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].name, split(parameters('ANFVolumeResourceID'), '/')[12])]",
                      "location": "global",
                      "tags": "[parameters('Tags')]",
                      "properties": {
                        "description": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].description]",
                        "severity": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].severity]",
                        "enabled": false,
                        "scopes": [
                          "[parameters('ANFVolumeResourceID')]"
                        ],
                        "evaluationFrequency": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].evaluationFrequency]",
                        "windowSize": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].windowSize]",
                        "criteria": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].criteria]",
                        "autoMitigate": false,
                        "targetResourceType": "[parameters('MetricAlertsANF')[range(0, length(parameters('MetricAlertsANF')))[copyIndex()]].targetResourceType]",
                        "targetResourceRegion": "[parameters('Location')]",
                        "actions": [
                          {
                            "actionGroupId": "[parameters('ActionGroupID')]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
              ]
            },
            {
              "condition": "[greater(length(parameters('StorageAccountResourceIds')), 0)]",
              "copy": {
                "name": "fileServicesMetric",
                "count": "[length(range(0, length(parameters('StorageAccountResourceIds'))))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('MetricAlert_FileServices_{0}', range(0, length(parameters('StorageAccountResourceIds')))[copyIndex()])]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "AlertNamePrefix": {
                    "value": "[parameters('AlertNamePrefix')]"
                  },
                  "Location": {
                    "value": "[parameters('Location')]"
                  },
                  "StorageAccountResourceID": {
                    "value": "[parameters('StorageAccountResourceIds')[range(0, length(parameters('StorageAccountResourceIds')))[copyIndex()]]]"
                  },
                  "MetricAlertsFileShares": {
                    "value": "[parameters('MetricAlerts').fileShares]"
                  },
                  "ActionGroupID": {
                    "value": "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
                  },
                  "Tags": {
                    "value": "[parameters('Tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "16641962629289939999"
                    }
                  },
                  "parameters": {
                    "AlertNamePrefix": {
                      "type": "string"
                    },
                    "Location": {
                      "type": "string"
                    },
                    "StorageAccountResourceID": {
                      "type": "string"
                    },
                    "MetricAlertsFileShares": {
                      "type": "array"
                    },
                    "ActionGroupID": {
                      "type": "string"
                    },
                    "Tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "FileServicesResourceID": "[format('{0}/fileServices/default', parameters('StorageAccountResourceID'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "metricAlerts_FileShares",
                        "count": "[length(range(0, length(parameters('MetricAlertsFileShares'))))]"
                      },
                      "type": "Microsoft.Insights/metricAlerts",
                      "apiVersion": "2018-03-01",
                      "name": "[format('{0}{1}-{2}', parameters('AlertNamePrefix'), parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].name, split(variables('FileServicesResourceID'), '/')[8])]",
                      "location": "global",
                      "tags": "[parameters('Tags')]",
                      "properties": {
                        "description": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].description]",
                        "severity": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].severity]",
                        "enabled": false,
                        "scopes": [
                          "[variables('FileServicesResourceID')]"
                        ],
                        "evaluationFrequency": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].evaluationFrequency]",
                        "windowSize": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].windowSize]",
                        "criteria": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].criteria]",
                        "autoMitigate": false,
                        "targetResourceType": "[parameters('MetricAlertsFileShares')[range(0, length(parameters('MetricAlertsFileShares')))[copyIndex()]].targetResourceType]",
                        "targetResourceRegion": "[parameters('Location')]",
                        "actions": [
                          {
                            "actionGroupId": "[parameters('ActionGroupID')]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('microsoft.insights/actionGroups', parameters('ActionGroupName'))]"
              ]
            },
            {
              "condition": "[greater(length(parameters('StorageAccountResourceIds')), 0)]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "LogicApp_Storage",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "AutomationAccountName": {
                    "value": "[parameters('AutomationAccountName')]"
                  },
                  "CloudEnvironment": {
                    "value": "[variables('CloudEnvironment')]"
                  },
                  "Location": {
                    "value": "[parameters('Location')]"
                  },
                  "LogicAppName": {
                    "value": "[format('{0}-Storage', parameters('LogicAppName'))]"
                  },
                  "RunbookNameGetStorage": {
                    "value": "[parameters('RunbookNameGetStorage')]"
                  },
                  "RunbookURI": {
                    "value": "[format('{0}{1}{2}', parameters('ScriptsRepositoryUri'), parameters('RunbookScriptGetStorage'), parameters('ScriptsRepositorySasToken'))]"
                  },
                  "StorageAccountResourceIds": {
                    "value": "[parameters('StorageAccountResourceIds')]"
                  },
                  "Timestamp": {
                    "value": "[parameters('Timestamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "16692433877117537016"
                    }
                  },
                  "parameters": {
                    "AutomationAccountName": {
                      "type": "string"
                    },
                    "CloudEnvironment": {
                      "type": "string"
                    },
                    "Location": {
                      "type": "string"
                    },
                    "LogicAppName": {
                      "type": "string"
                    },
                    "RunbookNameGetStorage": {
                      "type": "string"
                    },
                    "RunbookURI": {
                      "type": "string"
                    },
                    "StorageAccountResourceIds": {
                      "type": "array"
                    },
                    "Timestamp": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts/runbooks",
                      "apiVersion": "2019-06-01",
                      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), parameters('RunbookNameGetStorage'))]",
                      "location": "[parameters('Location')]",
                      "properties": {
                        "runbookType": "PowerShell",
                        "logProgress": false,
                        "logVerbose": false,
                        "publishContentLink": {
                          "uri": "[parameters('RunbookURI')]",
                          "version": "1.0.0.0"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/webhooks",
                      "apiVersion": "2015-10-31",
                      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetStorage'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]",
                      "properties": {
                        "isEnabled": true,
                        "expiryTime": "[dateTimeAdd(parameters('Timestamp'), 'P5Y')]",
                        "runbook": {
                          "name": "[parameters('RunbookNameGetStorage')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetStorage'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/variables",
                      "apiVersion": "2019-06-01",
                      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetStorage')))]",
                      "properties": {
                        "value": "[format('\"{0}\"', reference(resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetStorage'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))).uri)]",
                        "isEncrypted": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetStorage'))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetStorage'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Logic/workflows",
                      "apiVersion": "2016-06-01",
                      "name": "[parameters('LogicAppName')]",
                      "location": "[parameters('Location')]",
                      "properties": {
                        "state": "Enabled",
                        "definition": {
                          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                          "actions": {
                            "HTTP": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[replace(reference(resourceId('Microsoft.Automation/automationAccounts/variables', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetStorage')))).value, '\"', '')]",
                                "body": {
                                  "CloudEnvironment": "[parameters('CloudEnvironment')]",
                                  "StorageAccountResourceIDs": "[parameters('StorageAccountResourceIds')]"
                                }
                              }
                            }
                          },
                          "triggers": {
                            "Recurrence": {
                              "type": "Recurrence",
                              "recurrence": {
                                "frequency": "Minute",
                                "interval": 5
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetStorage'))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/variables', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetStorage')))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetStorage'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "LogicApp_HostPool",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "AutomationAccountName": {
                    "value": "[parameters('AutomationAccountName')]"
                  },
                  "CloudEnvironment": {
                    "value": "[variables('CloudEnvironment')]"
                  },
                  "Location": {
                    "value": "[parameters('Location')]"
                  },
                  "LogicAppName": {
                    "value": "[format('{0}-HostPool', parameters('LogicAppName'))]"
                  },
                  "RunbookNameGetHostPool": {
                    "value": "[parameters('RunbookNameGetHostPool')]"
                  },
                  "RunbookURI": {
                    "value": "[format('{0}{1}{2}', parameters('ScriptsRepositoryUri'), parameters('RunbookScriptGetHostPool'), parameters('ScriptsRepositorySasToken'))]"
                  },
                  "SubscriptionId": {
                    "value": "[variables('SubscriptionId')]"
                  },
                  "Timestamp": {
                    "value": "[parameters('Timestamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.10.61.36676",
                      "templateHash": "9807016233142339434"
                    }
                  },
                  "parameters": {
                    "AutomationAccountName": {
                      "type": "string"
                    },
                    "CloudEnvironment": {
                      "type": "string"
                    },
                    "Location": {
                      "type": "string"
                    },
                    "LogicAppName": {
                      "type": "string"
                    },
                    "RunbookNameGetHostPool": {
                      "type": "string"
                    },
                    "RunbookURI": {
                      "type": "string"
                    },
                    "SubscriptionId": {
                      "type": "string"
                    },
                    "Timestamp": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts/runbooks",
                      "apiVersion": "2019-06-01",
                      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), parameters('RunbookNameGetHostPool'))]",
                      "location": "[parameters('Location')]",
                      "properties": {
                        "runbookType": "PowerShell",
                        "logProgress": false,
                        "logVerbose": false,
                        "publishContentLink": {
                          "uri": "[parameters('RunbookURI')]",
                          "version": "1.0.0.0"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/webhooks",
                      "apiVersion": "2015-10-31",
                      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetHostPool'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]",
                      "properties": {
                        "isEnabled": true,
                        "expiryTime": "[dateTimeAdd(parameters('Timestamp'), 'P5Y')]",
                        "runbook": {
                          "name": "[parameters('RunbookNameGetHostPool')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetHostPool'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/variables",
                      "apiVersion": "2019-06-01",
                      "name": "[format('{0}/{1}', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetHostPool')))]",
                      "properties": {
                        "value": "[format('\"{0}\"', reference(resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetHostPool'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))).uri)]",
                        "isEncrypted": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetHostPool'))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetHostPool'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Logic/workflows",
                      "apiVersion": "2016-06-01",
                      "name": "[parameters('LogicAppName')]",
                      "location": "[parameters('Location')]",
                      "properties": {
                        "state": "Enabled",
                        "definition": {
                          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                          "actions": {
                            "HTTP": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "[replace(reference(resourceId('Microsoft.Automation/automationAccounts/variables', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetHostPool')))).value, '\"', '')]",
                                "body": {
                                  "CloudEnvironment": "[parameters('CloudEnvironment')]",
                                  "SubscriptionId": "[parameters('SubscriptionId')]"
                                }
                              }
                            }
                          },
                          "triggers": {
                            "Recurrence": {
                              "type": "Recurrence",
                              "recurrence": {
                                "frequency": "Minute",
                                "interval": 5
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('AutomationAccountName'), parameters('RunbookNameGetHostPool'))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/variables', parameters('AutomationAccountName'), format('WebhookURI_{0}', parameters('RunbookNameGetHostPool')))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/webhooks', parameters('AutomationAccountName'), format('{0}_{1}', parameters('RunbookNameGetHostPool'), dateTimeAdd(parameters('Timestamp'), 'PT0H', 'yyyyMMddhhmmss')))]"
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "automationAccountPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('AutomationAccountName')), '2021-06-22', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('ResourceGroupName'))]"
      ]
    }
  ]
}